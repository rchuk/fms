openapi: 3.0.1
info:
  title: FMS
  version: v1
servers:
  - url: http://localhost:3333
paths:
  /api/auth/register:
    post:
      tags:
        - Auth
      summary: Attempts to register new user using credentials
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
      responses:
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Returns access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
  /api/auth/login:
    post:
      tags:
        - Auth
      summary: Attempts to login using user credentials
      operationId: login
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - Email
                - Password
              type: object
              properties:
                Email:
                  type: string
                  example: meowmeow@gmail.com
                Password:
                  type: string
                  example: password1
            encoding:
              Email:
                style: form
              Password:
                style: form
      responses:
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Returns access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
  /api/auth/id:
    get:
      tags:
        - Auth
      summary: Get id of the current user
      operationId: getId
      responses:
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Returns id of the current user
          content:
            application/json:
              schema:
                type: integer
                format: int32
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
  /api/auth/me:
    get:
      tags:
        - Auth
      summary: Get current user
      operationId: getMe
      responses:
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Returns id of the current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSelfResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
  /api/organizations:
    put:
      tags:
        - Organization
      summary: Create new organization
      operationId: createOrganization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationUpsertRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/OrganizationUpsertRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/OrganizationUpsertRequest'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Organization id
          content:
            application/json:
              schema:
                type: integer
                format: int32
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
    get:
      tags:
        - Organization
      summary: Get list of current user's organizations
      operationId: listUserOrganizations
      parameters:
        - name: Offset
          in: query
          schema:
            type: integer
            format: int32
        - name: Limit
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
  '/api/organizations/{id}':
    get:
      tags:
        - Organization
      summary: Get organization
      operationId: getOrganization
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Organization data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
    post:
      tags:
        - Organization
      summary: Update organization
      operationId: updateOrganization
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationUpsertRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/OrganizationUpsertRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/OrganizationUpsertRequest'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
    delete:
      tags:
        - Organization
      summary: Delete organization
      operationId: deleteOrganization
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
  '/api/organizations/{organizationId}/users/{userId}':
    put:
      tags:
        - Organization
      summary: Add user to organization
      operationId: organizationAddUser
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
    delete:
      tags:
        - Organization
      summary: Remove user from organization
      operationId: organizationRemoveUser
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
    get:
      tags:
        - Organization
      summary: Get user role in organization
      operationId: organizationGetUserRole
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationRole'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
    post:
      tags:
        - Organization
      summary: Update user role in organization
      operationId: organizationUpdateUserRole
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationRole'
          text/json:
            schema:
              $ref: '#/components/schemas/OrganizationRole'
          application/*+json:
            schema:
              $ref: '#/components/schemas/OrganizationRole'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
  '/api/organizations/{organizationId}/users':
    get:
      tags:
        - Organization
      summary: Get list of users in organization
      operationId: listOrganizationUsers
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: Query
          in: query
          schema:
            type: string
            example: Jane
          example: Jane
        - name: Offset
          in: query
          schema:
            type: integer
            format: int32
        - name: Limit
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUserListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
  /api/subscriptions/buy:
    post:
      tags:
        - Subscription
      summary: Buy subscription
      operationId: buySubscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuySubscriptionRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/BuySubscriptionRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/BuySubscriptionRequest'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
  '/api/workspaces/{workspaceId}/transactions':
    put:
      tags:
        - Transaction
      summary: Create new transaction
      operationId: createTransaction
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionUpsertRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/TransactionUpsertRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TransactionUpsertRequest'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: integer
                format: int32
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
    get:
      tags:
        - Transaction
      summary: Get list of workspace transactions
      operationId: listTransactions
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: CategoryId
          in: query
          schema:
            type: integer
            format: int32
            example: 35
          example: 35
        - name: StartDate
          in: query
          schema:
            type: string
            format: date-time
            example: '2024-06-07T07:00:00.000Z'
          example: '2024-06-07T07:00:00.000Z'
        - name: EndDate
          in: query
          schema:
            type: string
            format: date-time
            example: 
          example: 'null'
        - name: UserId
          in: query
          schema:
            type: integer
            format: int32
            example: 
          example: 
        - name: MinAmount
          in: query
          schema:
            type: integer
            format: int32
            example: 300
          example: 300
        - name: MaxAmount
          in: query
          schema:
            type: integer
            format: int32
            example: 
          example: 
        - name: IncludeHistory
          in: query
          schema:
            type: boolean
            example: 
          example: 
        - name: CategoryKind
          in: query
          schema:
            $ref: '#/components/schemas/TransactionCategoryKind'
          example: 'null'
        - name: SortField
          in: query
          schema:
            $ref: '#/components/schemas/TransactionSortField'
        - name: SortDirection
          in: query
          schema:
            $ref: '#/components/schemas/SortDirection'
        - name: Offset
          in: query
          schema:
            type: integer
            format: int32
        - name: Limit
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
  '/api/transactions/{id}':
    get:
      tags:
        - Transaction
      summary: Get transaction
      operationId: getTransaction
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
    post:
      tags:
        - Transaction
      summary: Update transaction
      operationId: updateTransaction
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionUpsertRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/TransactionUpsertRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TransactionUpsertRequest'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
    delete:
      tags:
        - Transaction
      summary: Delete transaction
      operationId: deleteTransaction
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
  '/api/workspaces/{workspaceId}/transactions/group-by-category':
    get:
      tags:
        - Transaction
      summary: Get list of workspace transactions grouped by category
      operationId: listTransactionsGroupByCategory
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: CategoryId
          in: query
          schema:
            type: integer
            format: int32
            example: 35
          example: 35
        - name: StartDate
          in: query
          schema:
            type: string
            format: date-time
            example: '2024-06-07T07:00:00.000Z'
          example: '2024-06-07T07:00:00.000Z'
        - name: EndDate
          in: query
          schema:
            type: string
            format: date-time
            example: 
          example: 'null'
        - name: UserId
          in: query
          schema:
            type: integer
            format: int32
            example: 
          example: 
        - name: MinAmount
          in: query
          schema:
            type: integer
            format: int32
            example: 300
          example: 300
        - name: MaxAmount
          in: query
          schema:
            type: integer
            format: int32
            example: 
          example: 
        - name: IncludeHistory
          in: query
          schema:
            type: boolean
            example: 
          example: 
        - name: CategoryKind
          in: query
          schema:
            $ref: '#/components/schemas/TransactionCategoryKind'
          example: 'null'
        - name: SortField
          in: query
          schema:
            $ref: '#/components/schemas/TransactionSortField'
        - name: SortDirection
          in: query
          schema:
            $ref: '#/components/schemas/SortDirection'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionGroupedByCategoryListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
  '/api/workspaces/{workspaceId}/transactions/group-by-user':
    get:
      tags:
        - Transaction
      summary: Get list of workspace transactions grouped by user
      operationId: listTransactionsGroupByUser
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: CategoryId
          in: query
          schema:
            type: integer
            format: int32
            example: 35
          example: 35
        - name: StartDate
          in: query
          schema:
            type: string
            format: date-time
            example: '2024-06-07T07:00:00.000Z'
          example: '2024-06-07T07:00:00.000Z'
        - name: EndDate
          in: query
          schema:
            type: string
            format: date-time
            example: 
          example: 'null'
        - name: UserId
          in: query
          schema:
            type: integer
            format: int32
            example: 
          example: 
        - name: MinAmount
          in: query
          schema:
            type: integer
            format: int32
            example: 300
          example: 300
        - name: MaxAmount
          in: query
          schema:
            type: integer
            format: int32
            example: 
          example: 
        - name: IncludeHistory
          in: query
          schema:
            type: boolean
            example: 
          example: 
        - name: CategoryKind
          in: query
          schema:
            $ref: '#/components/schemas/TransactionCategoryKind'
          example: 'null'
        - name: SortField
          in: query
          schema:
            $ref: '#/components/schemas/TransactionSortField'
        - name: SortDirection
          in: query
          schema:
            $ref: '#/components/schemas/SortDirection'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionGroupedByUserListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
  /api/transactions/categories:
    put:
      tags:
        - TransactionCategory
      summary: Create user transaction category
      operationId: createUserTransactionCategory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCategoryUpsertRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/TransactionCategoryUpsertRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TransactionCategoryUpsertRequest'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: integer
                format: int32
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
    get:
      tags:
        - TransactionCategory
      summary: Get list of current user's transaction categories
      operationId: listUserTransactionCategories
      parameters:
        - name: Offset
          in: query
          schema:
            type: integer
            format: int32
        - name: Limit
          in: query
          schema:
            type: integer
            format: int32
        - name: IncludeOwner
          in: query
          schema:
            type: boolean
            example: true
          example: true
        - name: Query
          in: query
          schema:
            type: string
            example: mple catego
          example: mple catego
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCategoryListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
  '/api/organizations/{organizationId}/transactions/categories':
    put:
      tags:
        - TransactionCategory
      summary: Create organization transaction category
      operationId: createOrganizationTransactionCategory
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCategoryUpsertRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/TransactionCategoryUpsertRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TransactionCategoryUpsertRequest'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: integer
                format: int32
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
    get:
      tags:
        - TransactionCategory
      summary: Get list of organization's transaction categories
      operationId: listOrganizationTransactionCategories
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: Offset
          in: query
          schema:
            type: integer
            format: int32
        - name: Limit
          in: query
          schema:
            type: integer
            format: int32
        - name: IncludeOwner
          in: query
          schema:
            type: boolean
            example: true
          example: true
        - name: Query
          in: query
          schema:
            type: string
            example: mple catego
          example: mple catego
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCategoryListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
  '/api/workspaces/{workspaceId}/transactions/categories':
    put:
      tags:
        - TransactionCategory
      summary: Create workspace transaction category
      operationId: createWorkspaceTransactionCategory
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCategoryUpsertRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/TransactionCategoryUpsertRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TransactionCategoryUpsertRequest'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: integer
                format: int32
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
    get:
      tags:
        - TransactionCategory
      summary: Get list of workspace transaction categories
      operationId: listWorkspaceTransactionCategories
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: Offset
          in: query
          schema:
            type: integer
            format: int32
        - name: Limit
          in: query
          schema:
            type: integer
            format: int32
        - name: IncludeOwner
          in: query
          schema:
            type: boolean
            example: true
          example: true
        - name: Query
          in: query
          schema:
            type: string
            example: mple catego
          example: mple catego
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCategoryListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
  '/api/transactions/categories/{id}':
    get:
      tags:
        - TransactionCategory
      summary: Get transaction category
      operationId: getTransactionCategory
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCategoryResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
    post:
      tags:
        - TransactionCategory
      summary: Update transaction category
      operationId: updateTransactionCategory
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCategoryUpsertRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/TransactionCategoryUpsertRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TransactionCategoryUpsertRequest'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
    delete:
      tags:
        - TransactionCategory
      summary: Delete transaction category
      operationId: deleteTransactionCategory
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
  /api/users:
    post:
      tags:
        - User
      summary: Update user profile
      operationId: updateMe
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
          text/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
    get:
      tags:
        - User
      summary: Get list of users
      operationId: listUsers
      parameters:
        - name: Query
          in: query
          schema:
            type: string
            example: Jane
          example: Jane
        - name: Offset
          in: query
          schema:
            type: integer
            format: int32
        - name: Limit
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
  /api/workspaces:
    put:
      tags:
        - Workspace
      summary: Create shared user workspace
      operationId: createSharedUserWorkspace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkspaceUpsertRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/WorkspaceUpsertRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/WorkspaceUpsertRequest'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: integer
                format: int32
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
    get:
      tags:
        - Workspace
      summary: Get list of current user's workspaces
      operationId: listUserWorkspaces
      parameters:
        - name: Offset
          in: query
          schema:
            type: integer
            format: int32
        - name: Limit
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
  '/api/organizations/{organizationId}/workspaces':
    put:
      tags:
        - Workspace
      summary: Create organization workspace
      operationId: createOrganizationWorkspace
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkspaceUpsertRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/WorkspaceUpsertRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/WorkspaceUpsertRequest'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: integer
                format: int32
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
    get:
      tags:
        - Workspace
      summary: Get list of organization's workspaces
      operationId: listOrganizationWorkspaces
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: Offset
          in: query
          schema:
            type: integer
            format: int32
        - name: Limit
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
  '/api/workspaces/{id}':
    get:
      tags:
        - Workspace
      summary: Get workspace
      operationId: getWorkspace
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
    post:
      tags:
        - Workspace
      summary: Update workspace
      operationId: updateWorkspace
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkspaceUpsertRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/WorkspaceUpsertRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/WorkspaceUpsertRequest'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
    delete:
      tags:
        - Workspace
      summary: Delete workspace
      operationId: deleteWorkspace
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
  '/api/workspaces/{workspaceId}/users/{userId}':
    put:
      tags:
        - Workspace
      summary: Add user to workspace
      operationId: workspaceAddUser
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
    delete:
      tags:
        - Workspace
      summary: Remove user from workspace
      operationId: workspaceRemoveUser
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
    get:
      tags:
        - Workspace
      summary: Get user role in workspace
      operationId: workspaceGetUserRole
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceRole'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
    post:
      tags:
        - Workspace
      summary: Update user role in workspace
      operationId: workspaceUpdateUserRole
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkspaceRole'
          text/json:
            schema:
              $ref: '#/components/schemas/WorkspaceRole'
          application/*+json:
            schema:
              $ref: '#/components/schemas/WorkspaceRole'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
  '/api/workspaces/{workspaceId}/users':
    get:
      tags:
        - Workspace
      summary: Get list of users in workspace
      operationId: listWorkspaceUsers
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: Query
          in: query
          schema:
            type: string
            example: Jane
          example: Jane
        - name: Offset
          in: query
          schema:
            type: integer
            format: int32
        - name: Limit
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicError'
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceUserListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicClientError'
components:
  schemas:
    AccessTokenResponse:
      required:
        - access_token
        - expires_in
        - token_type
      type: object
      properties:
        access_token:
          minLength: 1
          type: string
          example: abcdefg123
        token_type:
          minLength: 1
          type: string
          example: Bearer
        expires_in:
          type: integer
          format: int32
          example: 3600
      additionalProperties: false
    AccountResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserResponse'
        organization:
          $ref: '#/components/schemas/OrganizationShortResponse'
      additionalProperties: false
    BuySubscriptionRequest:
      required:
        - kind
      type: object
      properties:
        kind:
          $ref: '#/components/schemas/SubscriptionKind'
      additionalProperties: false
    OrganizationListResponse:
      required:
        - items
        - totalCount
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
          example: 165
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationResponse'
      additionalProperties: false
    OrganizationResponse:
      required:
        - id
        - name
        - role
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 243
        name:
          minLength: 1
          type: string
          example: Cool Organization Inc.
        role:
          $ref: '#/components/schemas/OrganizationRole'
      additionalProperties: false
    OrganizationRole:
      enum:
        - OWNER
        - ADMIN
        - MEMBER
      type: string
    OrganizationShortResponse:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 243
        name:
          minLength: 1
          type: string
          example: Cool Organization Inc.
      additionalProperties: false
    OrganizationUpsertRequest:
      required:
        - name
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 3
          type: string
          example: New Organization Name
      additionalProperties: false
    OrganizationUserListResponse:
      required:
        - items
        - totalCount
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
          example: 165
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationUserResponse'
      additionalProperties: false
    OrganizationUserResponse:
      required:
        - role
        - user
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserResponse'
        role:
          $ref: '#/components/schemas/OrganizationRole'
      additionalProperties: false
    PublicClientError:
      required:
        - description
      type: object
      properties:
        description:
          minLength: 1
          type: string
          example: Something bad happened
        validationErrors:
          type: array
          items:
            type: string
          nullable: true
          example:
            - Email can't contain less than 3 characters
            - Password can't be empty
      additionalProperties: false
    PublicError:
      required:
        - description
      type: object
      properties:
        description:
          minLength: 1
          type: string
          example: Something bad happened
      additionalProperties: false
    SortDirection:
      enum:
        - ASCENDING
        - DESCENDING
      type: string
    SubscriptionKind:
      enum:
        - FAMILY
        - BUSINESS
        - BUSINESS_UNLIMITED
      type: string
    TransactionCategoryKind:
      enum:
        - INCOME
        - EXPENSE
        - MIXED
      type: string
    TransactionCategoryListResponse:
      required:
        - items
        - totalCount
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
          example: 165
        items:
          type: array
          items:
            $ref: '#/components/schemas/TransactionCategoryResponse'
      additionalProperties: false
    TransactionCategoryResponse:
      required:
        - id
        - kind
        - name
        - ownerAccount
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 5359
        name:
          minLength: 1
          type: string
          example: Salary
        ownerAccount:
          $ref: '#/components/schemas/AccountResponse'
        kind:
          $ref: '#/components/schemas/TransactionCategoryKind'
        uiColor:
          type: string
          nullable: true
          example: FF0022
        workspace:
          $ref: '#/components/schemas/WorkspaceShortResponse'
      additionalProperties: false
    TransactionCategoryUpsertRequest:
      required:
        - kind
        - name
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 3
          type: string
          example: Food
        kind:
          $ref: '#/components/schemas/TransactionCategoryKind'
        uiColor:
          type: string
          nullable: true
          example: FF7E38
      additionalProperties: false
    TransactionGroupedByCategoryListResponse:
      required:
        - items
        - totalAmount
      type: object
      properties:
        totalAmount:
          type: integer
          format: int32
          example: -340
        items:
          type: array
          items:
            $ref: '#/components/schemas/TransactionGroupedByCategoryResponse'
      additionalProperties: false
    TransactionGroupedByCategoryResponse:
      required:
        - amount
        - category
      type: object
      properties:
        category:
          $ref: '#/components/schemas/TransactionCategoryResponse'
        history:
          type: array
          items:
            $ref: '#/components/schemas/TransactionShortResponse'
          nullable: true
        amount:
          type: integer
          format: int32
          example: 15320
      additionalProperties: false
    TransactionGroupedByUserListResponse:
      required:
        - items
        - totalAmount
      type: object
      properties:
        totalAmount:
          type: integer
          format: int32
          example: 0
        items:
          type: array
          items:
            $ref: '#/components/schemas/TransactionGroupedByUserResponse'
      additionalProperties: false
    TransactionGroupedByUserResponse:
      required:
        - amount
        - user
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserResponse'
        history:
          type: array
          items:
            $ref: '#/components/schemas/TransactionShortResponse'
          nullable: true
        amount:
          type: integer
          format: int32
          example: -4320
      additionalProperties: false
    TransactionListResponse:
      required:
        - items
        - totalCount
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
          example: 165
        items:
          type: array
          items:
            $ref: '#/components/schemas/TransactionResponse'
      additionalProperties: false
    TransactionResponse:
      required:
        - amount
        - category
        - creationTimestamp
        - creationUser
        - id
        - timestamp
        - workspace
      type: object
      properties:
        id:
          type: integer
          format: int32
        workspace:
          $ref: '#/components/schemas/WorkspaceShortResponse'
        category:
          $ref: '#/components/schemas/TransactionCategoryResponse'
        amount:
          type: integer
          format: int32
          example: -530
        description:
          type: string
          nullable: true
          example: Some optional description
        timestamp:
          type: string
          format: date-time
        creationTimestamp:
          type: string
          format: date-time
        creationUser:
          $ref: '#/components/schemas/UserResponse'
        user:
          $ref: '#/components/schemas/UserResponse'
      additionalProperties: false
    TransactionShortResponse:
      required:
        - amount
        - id
        - timestamp
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 2138
        amount:
          type: integer
          format: int32
          example: 120
        timestamp:
          type: string
          format: date-time
      additionalProperties: false
    TransactionSortField:
      enum:
        - TIMESTAMP
        - AMOUNT
      type: string
    TransactionUpsertRequest:
      required:
        - amount
        - categoryId
      type: object
      properties:
        categoryId:
          type: integer
          format: int32
          example: 6402
        amount:
          type: integer
          format: int32
          example: 640
        description:
          maxLength: 2048
          type: string
          nullable: true
          example: Some different optional description
        timestamp:
          type: string
          format: date-time
          nullable: true
          example: 
        userId:
          type: integer
          format: int32
          nullable: true
          example: 
      additionalProperties: false
    UserListResponse:
      required:
        - items
        - totalCount
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
          example: 165
        items:
          type: array
          items:
            $ref: '#/components/schemas/UserResponse'
      additionalProperties: false
    UserRegisterRequest:
      required:
        - email
        - password
      type: object
      properties:
        email:
          maxLength: 255
          minLength: 3
          type: string
          example: meowmeow@gmail.com
        password:
          maxLength: 255
          minLength: 8
          type: string
          example: password1
      additionalProperties: false
    UserResponse:
      required:
        - firstName
        - id
        - lastName
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 25
        firstName:
          minLength: 1
          type: string
          example: John
        lastName:
          minLength: 1
          type: string
          example: Snow
      additionalProperties: false
    UserSelfResponse:
      required:
        - email
        - firstName
        - id
        - lastName
        - privateWorkspace
        - subscriptionKind
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 25
        firstName:
          minLength: 1
          type: string
          example: John
        lastName:
          minLength: 1
          type: string
          example: Snow
        email:
          minLength: 1
          type: string
          example: meow@gmail.com
        subscriptionKind:
          $ref: '#/components/schemas/SubscriptionKind'
        privateWorkspace:
          $ref: '#/components/schemas/WorkspaceResponse'
      additionalProperties: false
    UserUpdate:
      type: object
      properties:
        firstName:
          minLength: 3
          type: string
          nullable: true
          example: John
        lastName:
          minLength: 3
          type: string
          nullable: true
          example: Snow
      additionalProperties: false
    WorkspaceKind:
      enum:
        - PRIVATE
        - SHARED
      type: string
    WorkspaceListResponse:
      required:
        - items
        - totalCount
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
          example: 165
        items:
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceResponse'
      additionalProperties: false
    WorkspaceResponse:
      required:
        - id
        - kind
        - name
        - role
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 3501
        name:
          minLength: 1
          type: string
          example: Family workspace
        kind:
          $ref: '#/components/schemas/WorkspaceKind'
        role:
          $ref: '#/components/schemas/WorkspaceRole'
      additionalProperties: false
    WorkspaceRole:
      enum:
        - OWNER
        - ADMIN
        - COLLABORATOR
        - VIEWER
      type: string
    WorkspaceShortResponse:
      required:
        - id
        - kind
        - name
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1402
        name:
          minLength: 1
          type: string
          example: Family Workspace
        kind:
          $ref: '#/components/schemas/WorkspaceKind'
      additionalProperties: false
    WorkspaceUpsertRequest:
      required:
        - name
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 3
          type: string
          example: Cool Descriptive Workspace Name
      additionalProperties: false
    WorkspaceUserListResponse:
      required:
        - items
        - totalCount
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
          example: 165
        items:
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceUserResponse'
      additionalProperties: false
    WorkspaceUserResponse:
      required:
        - role
        - user
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserResponse'
        role:
          $ref: '#/components/schemas/WorkspaceRole'
      additionalProperties: false
  securitySchemes:
    Bearer:
      type: apiKey
      description: "JWT Authorization header using the Bearer scheme.\n\nEnter 'Bearer' [space] and then your token in the text input below.\nExample: 'Bearer 12345abcdef'"
      name: Authorization
      in: header
security:
  - Bearer: [ ]